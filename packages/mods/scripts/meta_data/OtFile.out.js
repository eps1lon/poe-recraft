// Generated automatically by nearley, version 2.13.0
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

  const ebnfToString = ([chars]) => chars.join('');
  // reverse of Object.entries() with the addition of merging duplicate keys
  // into an array
  const entriesToObj = entries => entries.reduce((acc, [key, value]) => {
	  
	  if (Array.isArray(acc[key])) {
	  	acc[key].push(value)
	  } else if (acc.hasOwnProperty(key)) {
	  	acc[key] = [acc[key], value];
	  } else {
	  	acc[key] = value;
	  }
	  return acc;
  }, {});
  // returns a function that is imilar to nearleys builtin id but returns
  // an entry pair for obj
  const entry = (key, transform = id => id) => ([value]) => [key, transform(value)];
  // forces {keys} to be an array type, if the property is undefined
  // an empty array is set (= type never[])
  const arrayCast = (obj, ...keys) => {
    for (const key of keys) {
      if (obj[key] === undefined) {
        obj[key] = [];
      } else if (!Array.isArray(obj[key])) {
        obj[key] = [obj[key]]
      }
    }
    return obj;
  }
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "main", "symbols": ["OtFile"]},
    {"name": "OtFile$ebnf$1", "symbols": ["Blankline"], "postprocess": id},
    {"name": "OtFile$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "OtFile", "symbols": ["OtVersion", "Blankline", "Extends", "OtFile$ebnf$1", "OtFascades"], "postprocess": ([version, , _extends, , fascades]) => ({version, extends: _extends, ...entriesToObj(fascades)})},
    {"name": "OtVersion$string$1", "symbols": [{"literal":"v"}, {"literal":"e"}, {"literal":"r"}, {"literal":"s"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "OtVersion", "symbols": ["OtVersion$string$1", "Whitespaces", "Number"], "postprocess": ([,, version]) => version},
    {"name": "Extends$string$1", "symbols": [{"literal":"e"}, {"literal":"x"}, {"literal":"t"}, {"literal":"e"}, {"literal":"n"}, {"literal":"d"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Extends", "symbols": ["Extends$string$1", "Whitespaces", "StringLiteral"], "postprocess": ([,, _extends]) => _extends},
    {"name": "OtFascades$ebnf$1", "symbols": []},
    {"name": "OtFascades$ebnf$1$subexpression$1$ebnf$1", "symbols": []},
    {"name": "OtFascades$ebnf$1$subexpression$1$ebnf$1", "symbols": ["OtFascades$ebnf$1$subexpression$1$ebnf$1", "Blankline"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "OtFascades$ebnf$1$subexpression$1", "symbols": ["OtFascade", "OtFascades$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "OtFascades$ebnf$1", "symbols": ["OtFascades$ebnf$1", "OtFascades$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "OtFascades", "symbols": ["OtFascades$ebnf$1"], "postprocess": ([result]) => result.map(([[f]]) => f)},
    {"name": "OtFascade", "symbols": ["Base"]},
    {"name": "OtFascade", "symbols": ["Mods"]},
    {"name": "OtFascade", "symbols": ["LocalStats"]},
    {"name": "OtFascade", "symbols": ["AttributeRequirements"]},
    {"name": "OtFascade", "symbols": ["Sockets"]},
    {"name": "OtFascade", "symbols": ["Quality"]},
    {"name": "OtFascade", "symbols": ["Armour"]},
    {"name": "OtFascade", "symbols": ["Charges"]},
    {"name": "OtFascade", "symbols": ["Map"]},
    {"name": "OtFascade", "symbols": ["Weapon"]},
    {"name": "OtFascade", "symbols": ["Shield"]},
    {"name": "OtFascade", "symbols": ["Imprint"]},
    {"name": "OtFascade", "symbols": ["Usable"]},
    {"name": "OtFascade", "symbols": ["Stack"]},
    {"name": "OtFascade", "symbols": ["CapturedMonster"]},
    {"name": "OtFascade", "symbols": ["Prophecy"]},
    {"name": "OtFascade", "symbols": ["Flask"]},
    {"name": "OtFascade", "symbols": ["SkillGem"]},
    {"name": "OtFascade", "symbols": ["Quest"]},
    {"name": "Base$macrocall$2$string$1", "symbols": [{"literal":"B"}, {"literal":"a"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Base$macrocall$2", "symbols": ["Base$macrocall$2$string$1"]},
    {"name": "Base$macrocall$3", "symbols": ["BaseProp"]},
    {"name": "Base$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Base$macrocall$1$ebnf$1", "symbols": ["Base$macrocall$1$ebnf$1", "Base$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Base$macrocall$1", "symbols": ["Base$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Base$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Base", "symbols": ["Base$macrocall$1"], "postprocess": entry('base', obj => arrayCast(obj, 'tags', 'remove_tags'))},
    {"name": "BaseProp", "symbols": ["BaseXSize"]},
    {"name": "BaseProp", "symbols": ["BaseYSize"]},
    {"name": "BaseProp", "symbols": ["BaseTag"]},
    {"name": "BaseProp", "symbols": ["BaseLevel"]},
    {"name": "BaseProp", "symbols": ["BaseDescription"]},
    {"name": "BaseProp", "symbols": ["BaseRemoveTag"]},
    {"name": "BaseLevel$macrocall$2$string$1", "symbols": [{"literal":"b"}, {"literal":"a"}, {"literal":"s"}, {"literal":"e"}, {"literal":"_"}, {"literal":"l"}, {"literal":"e"}, {"literal":"v"}, {"literal":"e"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "BaseLevel$macrocall$2", "symbols": ["BaseLevel$macrocall$2$string$1"]},
    {"name": "BaseLevel$macrocall$3", "symbols": ["Number"]},
    {"name": "BaseLevel$macrocall$1", "symbols": ["Whitespaces", "BaseLevel$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "BaseLevel$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "BaseLevel", "symbols": ["BaseLevel$macrocall$1"], "postprocess": entry('base_level')},
    {"name": "BaseTag$macrocall$2$string$1", "symbols": [{"literal":"t"}, {"literal":"a"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "BaseTag$macrocall$2", "symbols": ["BaseTag$macrocall$2$string$1"]},
    {"name": "BaseTag$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "BaseTag$macrocall$1", "symbols": ["Whitespaces", "BaseTag$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "BaseTag$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "BaseTag", "symbols": ["BaseTag$macrocall$1"], "postprocess": entry('tags')},
    {"name": "BaseXSize$macrocall$2$string$1", "symbols": [{"literal":"x"}, {"literal":"_"}, {"literal":"s"}, {"literal":"i"}, {"literal":"z"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "BaseXSize$macrocall$2", "symbols": ["BaseXSize$macrocall$2$string$1"]},
    {"name": "BaseXSize$macrocall$3", "symbols": ["Number"]},
    {"name": "BaseXSize$macrocall$1", "symbols": ["Whitespaces", "BaseXSize$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "BaseXSize$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "BaseXSize", "symbols": ["BaseXSize$macrocall$1"], "postprocess": entry('x_size')},
    {"name": "BaseYSize$macrocall$2$string$1", "symbols": [{"literal":"y"}, {"literal":"_"}, {"literal":"s"}, {"literal":"i"}, {"literal":"z"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "BaseYSize$macrocall$2", "symbols": ["BaseYSize$macrocall$2$string$1"]},
    {"name": "BaseYSize$macrocall$3", "symbols": ["Number"]},
    {"name": "BaseYSize$macrocall$1", "symbols": ["Whitespaces", "BaseYSize$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "BaseYSize$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "BaseYSize", "symbols": ["BaseYSize$macrocall$1"], "postprocess": entry('y_size')},
    {"name": "BaseDescription$macrocall$2$string$1", "symbols": [{"literal":"d"}, {"literal":"e"}, {"literal":"s"}, {"literal":"c"}, {"literal":"r"}, {"literal":"i"}, {"literal":"p"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}, {"literal":"_"}, {"literal":"t"}, {"literal":"e"}, {"literal":"x"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "BaseDescription$macrocall$2", "symbols": ["BaseDescription$macrocall$2$string$1"]},
    {"name": "BaseDescription$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "BaseDescription$macrocall$1", "symbols": ["Whitespaces", "BaseDescription$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "BaseDescription$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "BaseDescription", "symbols": ["BaseDescription$macrocall$1"], "postprocess": entry('description')},
    {"name": "BaseRemoveTag$macrocall$2$string$1", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"m"}, {"literal":"o"}, {"literal":"v"}, {"literal":"e"}, {"literal":"_"}, {"literal":"t"}, {"literal":"a"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "BaseRemoveTag$macrocall$2", "symbols": ["BaseRemoveTag$macrocall$2$string$1"]},
    {"name": "BaseRemoveTag$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "BaseRemoveTag$macrocall$1", "symbols": ["Whitespaces", "BaseRemoveTag$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "BaseRemoveTag$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "BaseRemoveTag", "symbols": ["BaseRemoveTag$macrocall$1"], "postprocess": entry('remove_tags')},
    {"name": "Mods$macrocall$2$string$1", "symbols": [{"literal":"M"}, {"literal":"o"}, {"literal":"d"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Mods$macrocall$2", "symbols": ["Mods$macrocall$2$string$1"]},
    {"name": "Mods$macrocall$3", "symbols": ["ModsProp"]},
    {"name": "Mods$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Mods$macrocall$1$ebnf$1", "symbols": ["Mods$macrocall$1$ebnf$1", "Mods$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Mods$macrocall$1", "symbols": ["Mods$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Mods$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Mods", "symbols": ["Mods$macrocall$1"], "postprocess": entry('mods')},
    {"name": "ModsProp", "symbols": ["ModsDescriptionsList"]},
    {"name": "ModsProp", "symbols": ["ModEnableRarity"]},
    {"name": "ModsProp", "symbols": ["ModDisableRarity"]},
    {"name": "ModsProp", "symbols": ["ModsInventoryType"]},
    {"name": "ModsDescriptionsList$macrocall$2$string$1", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"a"}, {"literal":"t"}, {"literal":"_"}, {"literal":"d"}, {"literal":"e"}, {"literal":"s"}, {"literal":"c"}, {"literal":"r"}, {"literal":"i"}, {"literal":"p"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}, {"literal":"_"}, {"literal":"l"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ModsDescriptionsList$macrocall$2", "symbols": ["ModsDescriptionsList$macrocall$2$string$1"]},
    {"name": "ModsDescriptionsList$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "ModsDescriptionsList$macrocall$1", "symbols": ["Whitespaces", "ModsDescriptionsList$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "ModsDescriptionsList$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "ModsDescriptionsList", "symbols": ["ModsDescriptionsList$macrocall$1"], "postprocess": entry('stat_description_list')},
    {"name": "ModEnableRarity$macrocall$2$string$1", "symbols": [{"literal":"e"}, {"literal":"n"}, {"literal":"a"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}, {"literal":"_"}, {"literal":"r"}, {"literal":"a"}, {"literal":"r"}, {"literal":"i"}, {"literal":"t"}, {"literal":"y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ModEnableRarity$macrocall$2", "symbols": ["ModEnableRarity$macrocall$2$string$1"]},
    {"name": "ModEnableRarity$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "ModEnableRarity$macrocall$1", "symbols": ["Whitespaces", "ModEnableRarity$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "ModEnableRarity$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "ModEnableRarity", "symbols": ["ModEnableRarity$macrocall$1"], "postprocess": entry('enable_rarities')},
    {"name": "ModDisableRarity$macrocall$2$string$1", "symbols": [{"literal":"d"}, {"literal":"i"}, {"literal":"s"}, {"literal":"a"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}, {"literal":"_"}, {"literal":"r"}, {"literal":"a"}, {"literal":"r"}, {"literal":"i"}, {"literal":"t"}, {"literal":"y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ModDisableRarity$macrocall$2", "symbols": ["ModDisableRarity$macrocall$2$string$1"]},
    {"name": "ModDisableRarity$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "ModDisableRarity$macrocall$1", "symbols": ["Whitespaces", "ModDisableRarity$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "ModDisableRarity$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "ModDisableRarity", "symbols": ["ModDisableRarity$macrocall$1"], "postprocess": entry('disable_rarities')},
    {"name": "ModsInventoryType$macrocall$2$string$1", "symbols": [{"literal":"i"}, {"literal":"n"}, {"literal":"v"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}, {"literal":"o"}, {"literal":"r"}, {"literal":"y"}, {"literal":"_"}, {"literal":"t"}, {"literal":"y"}, {"literal":"p"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ModsInventoryType$macrocall$2", "symbols": ["ModsInventoryType$macrocall$2$string$1"]},
    {"name": "ModsInventoryType$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "ModsInventoryType$macrocall$1", "symbols": ["Whitespaces", "ModsInventoryType$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "ModsInventoryType$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "ModsInventoryType", "symbols": ["ModsInventoryType$macrocall$1"], "postprocess": entry('inventory_type')},
    {"name": "LocalStats$macrocall$2$string$1", "symbols": [{"literal":"L"}, {"literal":"o"}, {"literal":"c"}, {"literal":"a"}, {"literal":"l"}, {"literal":"S"}, {"literal":"t"}, {"literal":"a"}, {"literal":"t"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "LocalStats$macrocall$2", "symbols": ["LocalStats$macrocall$2$string$1"]},
    {"name": "LocalStats$macrocall$3", "symbols": ["LocalStatsProp"]},
    {"name": "LocalStats$macrocall$1$ebnf$1", "symbols": []},
    {"name": "LocalStats$macrocall$1$ebnf$1", "symbols": ["LocalStats$macrocall$1$ebnf$1", "LocalStats$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "LocalStats$macrocall$1", "symbols": ["LocalStats$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "LocalStats$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "LocalStats", "symbols": ["LocalStats$macrocall$1"], "postprocess": entry('local_stats')},
    {"name": "LocalStatsProp", "symbols": ["NoProp"]},
    {"name": "AttributeRequirements$macrocall$2$string$1", "symbols": [{"literal":"A"}, {"literal":"t"}, {"literal":"t"}, {"literal":"r"}, {"literal":"i"}, {"literal":"b"}, {"literal":"u"}, {"literal":"t"}, {"literal":"e"}, {"literal":"R"}, {"literal":"e"}, {"literal":"q"}, {"literal":"u"}, {"literal":"i"}, {"literal":"r"}, {"literal":"e"}, {"literal":"m"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "AttributeRequirements$macrocall$2", "symbols": ["AttributeRequirements$macrocall$2$string$1"]},
    {"name": "AttributeRequirements$macrocall$3", "symbols": ["AttributeRequirementsProp"]},
    {"name": "AttributeRequirements$macrocall$1$ebnf$1", "symbols": []},
    {"name": "AttributeRequirements$macrocall$1$ebnf$1", "symbols": ["AttributeRequirements$macrocall$1$ebnf$1", "AttributeRequirements$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "AttributeRequirements$macrocall$1", "symbols": ["AttributeRequirements$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "AttributeRequirements$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "AttributeRequirements", "symbols": ["AttributeRequirements$macrocall$1"], "postprocess": entry('attribute_requirements')},
    {"name": "AttributeRequirementsProp", "symbols": ["AttributeRequirementsStr"]},
    {"name": "AttributeRequirementsProp", "symbols": ["AttributeRequirementsInt"]},
    {"name": "AttributeRequirementsProp", "symbols": ["AttributeRequirementsDex"]},
    {"name": "AttributeRequirementsStr$macrocall$2$string$1", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"r"}, {"literal":"e"}, {"literal":"n"}, {"literal":"g"}, {"literal":"t"}, {"literal":"h"}, {"literal":"_"}, {"literal":"r"}, {"literal":"e"}, {"literal":"q"}, {"literal":"u"}, {"literal":"i"}, {"literal":"r"}, {"literal":"e"}, {"literal":"m"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "AttributeRequirementsStr$macrocall$2", "symbols": ["AttributeRequirementsStr$macrocall$2$string$1"]},
    {"name": "AttributeRequirementsStr$macrocall$3", "symbols": ["Number"]},
    {"name": "AttributeRequirementsStr$macrocall$1", "symbols": ["Whitespaces", "AttributeRequirementsStr$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "AttributeRequirementsStr$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "AttributeRequirementsStr", "symbols": ["AttributeRequirementsStr$macrocall$1"], "postprocess": entry('strength')},
    {"name": "AttributeRequirementsInt$macrocall$2$string$1", "symbols": [{"literal":"i"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"l"}, {"literal":"l"}, {"literal":"i"}, {"literal":"g"}, {"literal":"e"}, {"literal":"n"}, {"literal":"c"}, {"literal":"e"}, {"literal":"_"}, {"literal":"r"}, {"literal":"e"}, {"literal":"q"}, {"literal":"u"}, {"literal":"i"}, {"literal":"r"}, {"literal":"e"}, {"literal":"m"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "AttributeRequirementsInt$macrocall$2", "symbols": ["AttributeRequirementsInt$macrocall$2$string$1"]},
    {"name": "AttributeRequirementsInt$macrocall$3", "symbols": ["Number"]},
    {"name": "AttributeRequirementsInt$macrocall$1", "symbols": ["Whitespaces", "AttributeRequirementsInt$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "AttributeRequirementsInt$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "AttributeRequirementsInt", "symbols": ["AttributeRequirementsInt$macrocall$1"], "postprocess": entry('intelligence')},
    {"name": "AttributeRequirementsDex$macrocall$2$string$1", "symbols": [{"literal":"d"}, {"literal":"e"}, {"literal":"x"}, {"literal":"t"}, {"literal":"e"}, {"literal":"r"}, {"literal":"i"}, {"literal":"t"}, {"literal":"y"}, {"literal":"_"}, {"literal":"r"}, {"literal":"e"}, {"literal":"q"}, {"literal":"u"}, {"literal":"i"}, {"literal":"r"}, {"literal":"e"}, {"literal":"m"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "AttributeRequirementsDex$macrocall$2", "symbols": ["AttributeRequirementsDex$macrocall$2$string$1"]},
    {"name": "AttributeRequirementsDex$macrocall$3", "symbols": ["Number"]},
    {"name": "AttributeRequirementsDex$macrocall$1", "symbols": ["Whitespaces", "AttributeRequirementsDex$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "AttributeRequirementsDex$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "AttributeRequirementsDex", "symbols": ["AttributeRequirementsDex$macrocall$1"], "postprocess": entry('dexterity')},
    {"name": "Sockets$macrocall$2$string$1", "symbols": [{"literal":"S"}, {"literal":"o"}, {"literal":"c"}, {"literal":"k"}, {"literal":"e"}, {"literal":"t"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Sockets$macrocall$2", "symbols": ["Sockets$macrocall$2$string$1"]},
    {"name": "Sockets$macrocall$3", "symbols": ["SocketsProps"]},
    {"name": "Sockets$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Sockets$macrocall$1$ebnf$1", "symbols": ["Sockets$macrocall$1$ebnf$1", "Sockets$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Sockets$macrocall$1", "symbols": ["Sockets$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Sockets$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Sockets", "symbols": ["Sockets$macrocall$1"], "postprocess": entry('sockets')},
    {"name": "SocketsProps", "symbols": ["SocketsInfo"]},
    {"name": "SocketsProps", "symbols": ["SocketsLockWhenFull"]},
    {"name": "SocketsInfo$macrocall$2$string$1", "symbols": [{"literal":"s"}, {"literal":"o"}, {"literal":"c"}, {"literal":"k"}, {"literal":"e"}, {"literal":"t"}, {"literal":"_"}, {"literal":"i"}, {"literal":"n"}, {"literal":"f"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "SocketsInfo$macrocall$2", "symbols": ["SocketsInfo$macrocall$2$string$1"]},
    {"name": "SocketsInfo$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "SocketsInfo$macrocall$1", "symbols": ["Whitespaces", "SocketsInfo$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "SocketsInfo$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "SocketsInfo", "symbols": ["SocketsInfo$macrocall$1"], "postprocess": entry('info')},
    {"name": "SocketsLockWhenFull$macrocall$2$string$1", "symbols": [{"literal":"l"}, {"literal":"o"}, {"literal":"c"}, {"literal":"k"}, {"literal":"_"}, {"literal":"s"}, {"literal":"o"}, {"literal":"c"}, {"literal":"k"}, {"literal":"e"}, {"literal":"t"}, {"literal":"s"}, {"literal":"_"}, {"literal":"w"}, {"literal":"h"}, {"literal":"e"}, {"literal":"n"}, {"literal":"_"}, {"literal":"f"}, {"literal":"u"}, {"literal":"l"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "SocketsLockWhenFull$macrocall$2", "symbols": ["SocketsLockWhenFull$macrocall$2$string$1"]},
    {"name": "SocketsLockWhenFull$macrocall$3", "symbols": ["Boolean"]},
    {"name": "SocketsLockWhenFull$macrocall$1", "symbols": ["Whitespaces", "SocketsLockWhenFull$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "SocketsLockWhenFull$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "SocketsLockWhenFull", "symbols": ["SocketsLockWhenFull$macrocall$1"], "postprocess": entry('lock_when_full')},
    {"name": "Quality$macrocall$2$string$1", "symbols": [{"literal":"Q"}, {"literal":"u"}, {"literal":"a"}, {"literal":"l"}, {"literal":"i"}, {"literal":"t"}, {"literal":"y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Quality$macrocall$2", "symbols": ["Quality$macrocall$2$string$1"]},
    {"name": "Quality$macrocall$3", "symbols": ["QualityProp"]},
    {"name": "Quality$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Quality$macrocall$1$ebnf$1", "symbols": ["Quality$macrocall$1$ebnf$1", "Quality$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Quality$macrocall$1", "symbols": ["Quality$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Quality$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Quality", "symbols": ["Quality$macrocall$1"], "postprocess": entry('quality')},
    {"name": "QualityProp", "symbols": ["QualityMax"]},
    {"name": "QualityMax$macrocall$2$string$1", "symbols": [{"literal":"m"}, {"literal":"a"}, {"literal":"x"}, {"literal":"_"}, {"literal":"q"}, {"literal":"u"}, {"literal":"a"}, {"literal":"l"}, {"literal":"i"}, {"literal":"t"}, {"literal":"y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "QualityMax$macrocall$2", "symbols": ["QualityMax$macrocall$2$string$1"]},
    {"name": "QualityMax$macrocall$3", "symbols": ["Number"]},
    {"name": "QualityMax$macrocall$1", "symbols": ["Whitespaces", "QualityMax$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "QualityMax$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "QualityMax", "symbols": ["QualityMax$macrocall$1"], "postprocess": entry('max')},
    {"name": "Armour$macrocall$2$string$1", "symbols": [{"literal":"A"}, {"literal":"r"}, {"literal":"m"}, {"literal":"o"}, {"literal":"u"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Armour$macrocall$2", "symbols": ["Armour$macrocall$2$string$1"]},
    {"name": "Armour$macrocall$3", "symbols": ["ArmourProp"]},
    {"name": "Armour$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Armour$macrocall$1$ebnf$1", "symbols": ["Armour$macrocall$1$ebnf$1", "Armour$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Armour$macrocall$1", "symbols": ["Armour$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Armour$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Armour", "symbols": ["Armour$macrocall$1"], "postprocess": entry('armour')},
    {"name": "ArmourProp", "symbols": ["NoProp"]},
    {"name": "Charges$macrocall$2$string$1", "symbols": [{"literal":"C"}, {"literal":"h"}, {"literal":"a"}, {"literal":"r"}, {"literal":"g"}, {"literal":"e"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Charges$macrocall$2", "symbols": ["Charges$macrocall$2$string$1"]},
    {"name": "Charges$macrocall$3", "symbols": ["ChargesProp"]},
    {"name": "Charges$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Charges$macrocall$1$ebnf$1", "symbols": ["Charges$macrocall$1$ebnf$1", "Charges$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Charges$macrocall$1", "symbols": ["Charges$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Charges$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Charges", "symbols": ["Charges$macrocall$1"], "postprocess": entry('charges')},
    {"name": "ChargesProp", "symbols": ["ChargesMax"]},
    {"name": "ChargesProp", "symbols": ["ChargesConsumed"]},
    {"name": "ChargesMax$macrocall$2$string$1", "symbols": [{"literal":"m"}, {"literal":"a"}, {"literal":"x"}, {"literal":"_"}, {"literal":"c"}, {"literal":"h"}, {"literal":"a"}, {"literal":"r"}, {"literal":"g"}, {"literal":"e"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ChargesMax$macrocall$2", "symbols": ["ChargesMax$macrocall$2$string$1"]},
    {"name": "ChargesMax$macrocall$3", "symbols": ["Number"]},
    {"name": "ChargesMax$macrocall$1", "symbols": ["Whitespaces", "ChargesMax$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "ChargesMax$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "ChargesMax", "symbols": ["ChargesMax$macrocall$1"], "postprocess": entry('max')},
    {"name": "ChargesConsumed$macrocall$2$string$1", "symbols": [{"literal":"c"}, {"literal":"h"}, {"literal":"a"}, {"literal":"r"}, {"literal":"g"}, {"literal":"e"}, {"literal":"s"}, {"literal":"_"}, {"literal":"p"}, {"literal":"e"}, {"literal":"r"}, {"literal":"_"}, {"literal":"u"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ChargesConsumed$macrocall$2", "symbols": ["ChargesConsumed$macrocall$2$string$1"]},
    {"name": "ChargesConsumed$macrocall$3", "symbols": ["Number"]},
    {"name": "ChargesConsumed$macrocall$1", "symbols": ["Whitespaces", "ChargesConsumed$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "ChargesConsumed$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "ChargesConsumed", "symbols": ["ChargesConsumed$macrocall$1"], "postprocess": entry('consumed_per_use')},
    {"name": "Map$macrocall$2$string$1", "symbols": [{"literal":"M"}, {"literal":"a"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Map$macrocall$2", "symbols": ["Map$macrocall$2$string$1"]},
    {"name": "Map$macrocall$3", "symbols": ["MapProp"]},
    {"name": "Map$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Map$macrocall$1$ebnf$1", "symbols": ["Map$macrocall$1$ebnf$1", "Map$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Map$macrocall$1", "symbols": ["Map$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Map$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Map", "symbols": ["Map$macrocall$1"], "postprocess": entry('map')},
    {"name": "MapProp", "symbols": ["NoProp"]},
    {"name": "Weapon$macrocall$2$string$1", "symbols": [{"literal":"W"}, {"literal":"e"}, {"literal":"a"}, {"literal":"p"}, {"literal":"o"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Weapon$macrocall$2", "symbols": ["Weapon$macrocall$2$string$1"]},
    {"name": "Weapon$macrocall$3", "symbols": ["WeaponProp"]},
    {"name": "Weapon$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Weapon$macrocall$1$ebnf$1", "symbols": ["Weapon$macrocall$1$ebnf$1", "Weapon$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Weapon$macrocall$1", "symbols": ["Weapon$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Weapon$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Weapon", "symbols": ["Weapon$macrocall$1"], "postprocess": entry('weapon')},
    {"name": "WeaponProp", "symbols": ["WeaponClass"]},
    {"name": "WeaponProp", "symbols": ["WeaponMinAttackDistance"]},
    {"name": "WeaponProp", "symbols": ["WeaponMaxAttackDistance"]},
    {"name": "WeaponProp", "symbols": ["WeaponMinDamage"]},
    {"name": "WeaponProp", "symbols": ["WeaponMaxDamage"]},
    {"name": "WeaponProp", "symbols": ["WeaponSpeed"]},
    {"name": "WeaponProp", "symbols": ["WeaponCritChance"]},
    {"name": "WeaponProp", "symbols": ["WeaponAccuracy"]},
    {"name": "WeaponClass$macrocall$2$string$1", "symbols": [{"literal":"w"}, {"literal":"e"}, {"literal":"a"}, {"literal":"p"}, {"literal":"o"}, {"literal":"n"}, {"literal":"_"}, {"literal":"c"}, {"literal":"l"}, {"literal":"a"}, {"literal":"s"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "WeaponClass$macrocall$2", "symbols": ["WeaponClass$macrocall$2$string$1"]},
    {"name": "WeaponClass$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "WeaponClass$macrocall$1", "symbols": ["Whitespaces", "WeaponClass$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "WeaponClass$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "WeaponClass", "symbols": ["WeaponClass$macrocall$1"], "postprocess": entry('weapon_class')},
    {"name": "WeaponMinAttackDistance$macrocall$2$string$1", "symbols": [{"literal":"m"}, {"literal":"i"}, {"literal":"n"}, {"literal":"i"}, {"literal":"m"}, {"literal":"u"}, {"literal":"m"}, {"literal":"_"}, {"literal":"a"}, {"literal":"t"}, {"literal":"t"}, {"literal":"a"}, {"literal":"c"}, {"literal":"k"}, {"literal":"_"}, {"literal":"d"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"a"}, {"literal":"n"}, {"literal":"c"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "WeaponMinAttackDistance$macrocall$2", "symbols": ["WeaponMinAttackDistance$macrocall$2$string$1"]},
    {"name": "WeaponMinAttackDistance$macrocall$3", "symbols": ["Number"]},
    {"name": "WeaponMinAttackDistance$macrocall$1", "symbols": ["Whitespaces", "WeaponMinAttackDistance$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "WeaponMinAttackDistance$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "WeaponMinAttackDistance", "symbols": ["WeaponMinAttackDistance$macrocall$1"], "postprocess": entry('minimum_attack_distance')},
    {"name": "WeaponMaxAttackDistance$macrocall$2$string$1", "symbols": [{"literal":"m"}, {"literal":"a"}, {"literal":"x"}, {"literal":"i"}, {"literal":"m"}, {"literal":"u"}, {"literal":"m"}, {"literal":"_"}, {"literal":"a"}, {"literal":"t"}, {"literal":"t"}, {"literal":"a"}, {"literal":"c"}, {"literal":"k"}, {"literal":"_"}, {"literal":"d"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"a"}, {"literal":"n"}, {"literal":"c"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "WeaponMaxAttackDistance$macrocall$2", "symbols": ["WeaponMaxAttackDistance$macrocall$2$string$1"]},
    {"name": "WeaponMaxAttackDistance$macrocall$3", "symbols": ["Number"]},
    {"name": "WeaponMaxAttackDistance$macrocall$1", "symbols": ["Whitespaces", "WeaponMaxAttackDistance$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "WeaponMaxAttackDistance$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "WeaponMaxAttackDistance", "symbols": ["WeaponMaxAttackDistance$macrocall$1"], "postprocess": entry('maximum_attack_distance')},
    {"name": "WeaponMinDamage$macrocall$2$string$1", "symbols": [{"literal":"m"}, {"literal":"i"}, {"literal":"n"}, {"literal":"i"}, {"literal":"m"}, {"literal":"u"}, {"literal":"m"}, {"literal":"_"}, {"literal":"d"}, {"literal":"a"}, {"literal":"m"}, {"literal":"a"}, {"literal":"g"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "WeaponMinDamage$macrocall$2", "symbols": ["WeaponMinDamage$macrocall$2$string$1"]},
    {"name": "WeaponMinDamage$macrocall$3", "symbols": ["Number"]},
    {"name": "WeaponMinDamage$macrocall$1", "symbols": ["Whitespaces", "WeaponMinDamage$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "WeaponMinDamage$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "WeaponMinDamage", "symbols": ["WeaponMinDamage$macrocall$1"], "postprocess": entry('minimum_damage')},
    {"name": "WeaponMaxDamage$macrocall$2$string$1", "symbols": [{"literal":"m"}, {"literal":"a"}, {"literal":"x"}, {"literal":"i"}, {"literal":"m"}, {"literal":"u"}, {"literal":"m"}, {"literal":"_"}, {"literal":"d"}, {"literal":"a"}, {"literal":"m"}, {"literal":"a"}, {"literal":"g"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "WeaponMaxDamage$macrocall$2", "symbols": ["WeaponMaxDamage$macrocall$2$string$1"]},
    {"name": "WeaponMaxDamage$macrocall$3", "symbols": ["Number"]},
    {"name": "WeaponMaxDamage$macrocall$1", "symbols": ["Whitespaces", "WeaponMaxDamage$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "WeaponMaxDamage$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "WeaponMaxDamage", "symbols": ["WeaponMaxDamage$macrocall$1"], "postprocess": entry('maximum_damage')},
    {"name": "WeaponSpeed$macrocall$2$string$1", "symbols": [{"literal":"w"}, {"literal":"e"}, {"literal":"a"}, {"literal":"p"}, {"literal":"o"}, {"literal":"n"}, {"literal":"_"}, {"literal":"s"}, {"literal":"p"}, {"literal":"e"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "WeaponSpeed$macrocall$2", "symbols": ["WeaponSpeed$macrocall$2$string$1"]},
    {"name": "WeaponSpeed$macrocall$3", "symbols": ["Number"]},
    {"name": "WeaponSpeed$macrocall$1", "symbols": ["Whitespaces", "WeaponSpeed$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "WeaponSpeed$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "WeaponSpeed", "symbols": ["WeaponSpeed$macrocall$1"], "postprocess": entry('weapon_speed')},
    {"name": "WeaponCritChance$macrocall$2$string$1", "symbols": [{"literal":"c"}, {"literal":"r"}, {"literal":"i"}, {"literal":"t"}, {"literal":"i"}, {"literal":"c"}, {"literal":"a"}, {"literal":"l"}, {"literal":"_"}, {"literal":"c"}, {"literal":"h"}, {"literal":"a"}, {"literal":"n"}, {"literal":"c"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "WeaponCritChance$macrocall$2", "symbols": ["WeaponCritChance$macrocall$2$string$1"]},
    {"name": "WeaponCritChance$macrocall$3", "symbols": ["Number"]},
    {"name": "WeaponCritChance$macrocall$1", "symbols": ["Whitespaces", "WeaponCritChance$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "WeaponCritChance$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "WeaponCritChance", "symbols": ["WeaponCritChance$macrocall$1"], "postprocess": entry('critical_chance')},
    {"name": "WeaponAccuracy$macrocall$2$string$1", "symbols": [{"literal":"a"}, {"literal":"c"}, {"literal":"c"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"c"}, {"literal":"y"}, {"literal":"_"}, {"literal":"r"}, {"literal":"a"}, {"literal":"t"}, {"literal":"i"}, {"literal":"n"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "WeaponAccuracy$macrocall$2", "symbols": ["WeaponAccuracy$macrocall$2$string$1"]},
    {"name": "WeaponAccuracy$macrocall$3", "symbols": ["Number"]},
    {"name": "WeaponAccuracy$macrocall$1", "symbols": ["Whitespaces", "WeaponAccuracy$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "WeaponAccuracy$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "WeaponAccuracy", "symbols": ["WeaponAccuracy$macrocall$1"], "postprocess": entry('accuracy_rating')},
    {"name": "Shield$macrocall$2$string$1", "symbols": [{"literal":"S"}, {"literal":"h"}, {"literal":"i"}, {"literal":"e"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Shield$macrocall$2", "symbols": ["Shield$macrocall$2$string$1"]},
    {"name": "Shield$macrocall$3", "symbols": ["ShieldProp"]},
    {"name": "Shield$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Shield$macrocall$1$ebnf$1", "symbols": ["Shield$macrocall$1$ebnf$1", "Shield$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Shield$macrocall$1", "symbols": ["Shield$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Shield$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Shield", "symbols": ["Shield$macrocall$1"], "postprocess": entry('shield')},
    {"name": "ShieldProp", "symbols": ["ShieldBlock"]},
    {"name": "ShieldBlock$macrocall$2$string$1", "symbols": [{"literal":"b"}, {"literal":"l"}, {"literal":"o"}, {"literal":"c"}, {"literal":"k"}, {"literal":"_"}, {"literal":"p"}, {"literal":"e"}, {"literal":"r"}, {"literal":"c"}, {"literal":"e"}, {"literal":"n"}, {"literal":"t"}, {"literal":"a"}, {"literal":"g"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "ShieldBlock$macrocall$2", "symbols": ["ShieldBlock$macrocall$2$string$1"]},
    {"name": "ShieldBlock$macrocall$3", "symbols": ["Number"]},
    {"name": "ShieldBlock$macrocall$1", "symbols": ["Whitespaces", "ShieldBlock$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "ShieldBlock$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "ShieldBlock", "symbols": ["ShieldBlock$macrocall$1"], "postprocess": entry('block')},
    {"name": "Imprint$macrocall$2$string$1", "symbols": [{"literal":"I"}, {"literal":"m"}, {"literal":"p"}, {"literal":"r"}, {"literal":"i"}, {"literal":"n"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Imprint$macrocall$2", "symbols": ["Imprint$macrocall$2$string$1"]},
    {"name": "Imprint$macrocall$3", "symbols": ["ImprintProp"]},
    {"name": "Imprint$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Imprint$macrocall$1$ebnf$1", "symbols": ["Imprint$macrocall$1$ebnf$1", "Imprint$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Imprint$macrocall$1", "symbols": ["Imprint$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Imprint$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Imprint", "symbols": ["Imprint$macrocall$1"], "postprocess": entry('imprint')},
    {"name": "ImprintProp", "symbols": ["NoProp"]},
    {"name": "Usable$macrocall$2$string$1", "symbols": [{"literal":"U"}, {"literal":"s"}, {"literal":"a"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Usable$macrocall$2", "symbols": ["Usable$macrocall$2$string$1"]},
    {"name": "Usable$macrocall$3", "symbols": ["UsableProp"]},
    {"name": "Usable$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Usable$macrocall$1$ebnf$1", "symbols": ["Usable$macrocall$1$ebnf$1", "Usable$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Usable$macrocall$1", "symbols": ["Usable$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Usable$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Usable", "symbols": ["Usable$macrocall$1"], "postprocess": entry('usable')},
    {"name": "UsableProp", "symbols": ["UsableType"]},
    {"name": "UsableProp", "symbols": ["UsableAction"]},
    {"name": "UsableProp", "symbols": ["UsableWhenSocketsLocked"]},
    {"name": "UsableType$macrocall$2$string$1", "symbols": [{"literal":"u"}, {"literal":"s"}, {"literal":"e"}, {"literal":"_"}, {"literal":"t"}, {"literal":"y"}, {"literal":"p"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "UsableType$macrocall$2", "symbols": ["UsableType$macrocall$2$string$1"]},
    {"name": "UsableType$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "UsableType$macrocall$1", "symbols": ["Whitespaces", "UsableType$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "UsableType$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "UsableType", "symbols": ["UsableType$macrocall$1"], "postprocess": entry('type')},
    {"name": "UsableAction$macrocall$2$string$1", "symbols": [{"literal":"a"}, {"literal":"c"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "UsableAction$macrocall$2", "symbols": ["UsableAction$macrocall$2$string$1"]},
    {"name": "UsableAction$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "UsableAction$macrocall$1", "symbols": ["Whitespaces", "UsableAction$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "UsableAction$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "UsableAction", "symbols": ["UsableAction$macrocall$1"], "postprocess": entry('action')},
    {"name": "UsableWhenSocketsLocked$macrocall$2$string$1", "symbols": [{"literal":"u"}, {"literal":"s"}, {"literal":"a"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}, {"literal":"_"}, {"literal":"w"}, {"literal":"h"}, {"literal":"e"}, {"literal":"n"}, {"literal":"_"}, {"literal":"s"}, {"literal":"o"}, {"literal":"c"}, {"literal":"k"}, {"literal":"e"}, {"literal":"t"}, {"literal":"s"}, {"literal":"_"}, {"literal":"l"}, {"literal":"o"}, {"literal":"c"}, {"literal":"k"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "UsableWhenSocketsLocked$macrocall$2", "symbols": ["UsableWhenSocketsLocked$macrocall$2$string$1"]},
    {"name": "UsableWhenSocketsLocked$macrocall$3", "symbols": ["Boolean"]},
    {"name": "UsableWhenSocketsLocked$macrocall$1", "symbols": ["Whitespaces", "UsableWhenSocketsLocked$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "UsableWhenSocketsLocked$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "UsableWhenSocketsLocked", "symbols": ["UsableWhenSocketsLocked$macrocall$1"], "postprocess": entry('usable_when_sockets_locked')},
    {"name": "Stack$macrocall$2$string$1", "symbols": [{"literal":"S"}, {"literal":"t"}, {"literal":"a"}, {"literal":"c"}, {"literal":"k"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Stack$macrocall$2", "symbols": ["Stack$macrocall$2$string$1"]},
    {"name": "Stack$macrocall$3", "symbols": ["StackProp"]},
    {"name": "Stack$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Stack$macrocall$1$ebnf$1", "symbols": ["Stack$macrocall$1$ebnf$1", "Stack$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Stack$macrocall$1", "symbols": ["Stack$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Stack$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Stack", "symbols": ["Stack$macrocall$1"], "postprocess": entry('stack')},
    {"name": "StackProp", "symbols": ["StackMax"]},
    {"name": "StackProp", "symbols": ["StackFunction"]},
    {"name": "StackMax$macrocall$2$string$1", "symbols": [{"literal":"m"}, {"literal":"a"}, {"literal":"x"}, {"literal":"_"}, {"literal":"s"}, {"literal":"t"}, {"literal":"a"}, {"literal":"c"}, {"literal":"k"}, {"literal":"_"}, {"literal":"s"}, {"literal":"i"}, {"literal":"z"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "StackMax$macrocall$2", "symbols": ["StackMax$macrocall$2$string$1"]},
    {"name": "StackMax$macrocall$3", "symbols": ["Number"]},
    {"name": "StackMax$macrocall$1", "symbols": ["Whitespaces", "StackMax$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "StackMax$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "StackMax", "symbols": ["StackMax$macrocall$1"], "postprocess": entry('max_size')},
    {"name": "StackFunction$macrocall$2$string$1", "symbols": [{"literal":"f"}, {"literal":"u"}, {"literal":"n"}, {"literal":"c"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}, {"literal":"_"}, {"literal":"t"}, {"literal":"e"}, {"literal":"x"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "StackFunction$macrocall$2", "symbols": ["StackFunction$macrocall$2$string$1"]},
    {"name": "StackFunction$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "StackFunction$macrocall$1", "symbols": ["Whitespaces", "StackFunction$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "StackFunction$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "StackFunction", "symbols": ["StackFunction$macrocall$1"], "postprocess": entry('function_text')},
    {"name": "CapturedMonster$macrocall$2$string$1", "symbols": [{"literal":"C"}, {"literal":"a"}, {"literal":"p"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"e"}, {"literal":"d"}, {"literal":"M"}, {"literal":"o"}, {"literal":"n"}, {"literal":"s"}, {"literal":"t"}, {"literal":"e"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "CapturedMonster$macrocall$2", "symbols": ["CapturedMonster$macrocall$2$string$1"]},
    {"name": "CapturedMonster$macrocall$3", "symbols": ["CapturedMonsterProp"]},
    {"name": "CapturedMonster$macrocall$1$ebnf$1", "symbols": []},
    {"name": "CapturedMonster$macrocall$1$ebnf$1", "symbols": ["CapturedMonster$macrocall$1$ebnf$1", "CapturedMonster$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "CapturedMonster$macrocall$1", "symbols": ["CapturedMonster$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "CapturedMonster$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "CapturedMonster", "symbols": ["CapturedMonster$macrocall$1"], "postprocess": entry('captured_monster')},
    {"name": "CapturedMonsterProp", "symbols": ["NoProp"]},
    {"name": "Prophecy$macrocall$2$string$1", "symbols": [{"literal":"P"}, {"literal":"r"}, {"literal":"o"}, {"literal":"p"}, {"literal":"h"}, {"literal":"e"}, {"literal":"c"}, {"literal":"y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Prophecy$macrocall$2", "symbols": ["Prophecy$macrocall$2$string$1"]},
    {"name": "Prophecy$macrocall$3", "symbols": ["ProphecyProp"]},
    {"name": "Prophecy$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Prophecy$macrocall$1$ebnf$1", "symbols": ["Prophecy$macrocall$1$ebnf$1", "Prophecy$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Prophecy$macrocall$1", "symbols": ["Prophecy$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Prophecy$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Prophecy", "symbols": ["Prophecy$macrocall$1"], "postprocess": entry('prophecy')},
    {"name": "ProphecyProp", "symbols": ["NoProp"]},
    {"name": "Flask$macrocall$2$string$1", "symbols": [{"literal":"F"}, {"literal":"l"}, {"literal":"a"}, {"literal":"s"}, {"literal":"k"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Flask$macrocall$2", "symbols": ["Flask$macrocall$2$string$1"]},
    {"name": "Flask$macrocall$3", "symbols": ["FlaskProp"]},
    {"name": "Flask$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Flask$macrocall$1$ebnf$1", "symbols": ["Flask$macrocall$1$ebnf$1", "Flask$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Flask$macrocall$1", "symbols": ["Flask$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Flask$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Flask", "symbols": ["Flask$macrocall$1"], "postprocess": entry('flask')},
    {"name": "FlaskProp", "symbols": ["NoProp"]},
    {"name": "SkillGem$macrocall$2$string$1", "symbols": [{"literal":"S"}, {"literal":"k"}, {"literal":"i"}, {"literal":"l"}, {"literal":"l"}, {"literal":"G"}, {"literal":"e"}, {"literal":"m"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "SkillGem$macrocall$2", "symbols": ["SkillGem$macrocall$2$string$1"]},
    {"name": "SkillGem$macrocall$3", "symbols": ["SkillGemProp"]},
    {"name": "SkillGem$macrocall$1$ebnf$1", "symbols": []},
    {"name": "SkillGem$macrocall$1$ebnf$1", "symbols": ["SkillGem$macrocall$1$ebnf$1", "SkillGem$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "SkillGem$macrocall$1", "symbols": ["SkillGem$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "SkillGem$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "SkillGem", "symbols": ["SkillGem$macrocall$1"], "postprocess": entry('skill_gem')},
    {"name": "SkillGemProp", "symbols": ["NoProp"]},
    {"name": "Quest$macrocall$2$string$1", "symbols": [{"literal":"Q"}, {"literal":"u"}, {"literal":"e"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Quest$macrocall$2", "symbols": ["Quest$macrocall$2$string$1"]},
    {"name": "Quest$macrocall$3", "symbols": ["QuestProp"]},
    {"name": "Quest$macrocall$1$ebnf$1", "symbols": []},
    {"name": "Quest$macrocall$1$ebnf$1", "symbols": ["Quest$macrocall$1$ebnf$1", "Quest$macrocall$3"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Quest$macrocall$1", "symbols": ["Quest$macrocall$2", "Blankline", {"literal":"{"}, "Blankline", "Quest$macrocall$1$ebnf$1", {"literal":"}"}], "postprocess": ([,,,,result]) => entriesToObj(result.map(([[prop]]) => prop))},
    {"name": "Quest", "symbols": ["Quest$macrocall$1"], "postprocess": entry('quest')},
    {"name": "QuestProp", "symbols": ["QuestRemoveFlag"]},
    {"name": "QuestProp", "symbols": ["QuestLeagueRemoveFlag"]},
    {"name": "QuestProp", "symbols": ["QuestGrantFlag"]},
    {"name": "QuestProp", "symbols": ["QuestUseFlag"]},
    {"name": "QuestProp", "symbols": ["QuestExtraFlag"]},
    {"name": "QuestProp", "symbols": ["QuestExtraFlag2"]},
    {"name": "QuestProp", "symbols": ["QuestIsMap"]},
    {"name": "QuestProp", "symbols": ["QuestCanSell"]},
    {"name": "QuestRemoveFlag$macrocall$2$string$1", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"m"}, {"literal":"o"}, {"literal":"v"}, {"literal":"e"}, {"literal":"_"}, {"literal":"f"}, {"literal":"l"}, {"literal":"a"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "QuestRemoveFlag$macrocall$2", "symbols": ["QuestRemoveFlag$macrocall$2$string$1"]},
    {"name": "QuestRemoveFlag$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "QuestRemoveFlag$macrocall$1", "symbols": ["Whitespaces", "QuestRemoveFlag$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "QuestRemoveFlag$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "QuestRemoveFlag", "symbols": ["QuestRemoveFlag$macrocall$1"], "postprocess": entry('remove_flags')},
    {"name": "QuestLeagueRemoveFlag$macrocall$2$string$1", "symbols": [{"literal":"l"}, {"literal":"e"}, {"literal":"a"}, {"literal":"g"}, {"literal":"u"}, {"literal":"e"}, {"literal":"_"}, {"literal":"r"}, {"literal":"e"}, {"literal":"m"}, {"literal":"o"}, {"literal":"v"}, {"literal":"e"}, {"literal":"_"}, {"literal":"f"}, {"literal":"l"}, {"literal":"a"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "QuestLeagueRemoveFlag$macrocall$2", "symbols": ["QuestLeagueRemoveFlag$macrocall$2$string$1"]},
    {"name": "QuestLeagueRemoveFlag$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "QuestLeagueRemoveFlag$macrocall$1", "symbols": ["Whitespaces", "QuestLeagueRemoveFlag$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "QuestLeagueRemoveFlag$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "QuestLeagueRemoveFlag", "symbols": ["QuestLeagueRemoveFlag$macrocall$1"], "postprocess": entry('league_remove_flags')},
    {"name": "QuestGrantFlag$macrocall$2$string$1", "symbols": [{"literal":"g"}, {"literal":"r"}, {"literal":"a"}, {"literal":"n"}, {"literal":"t"}, {"literal":"_"}, {"literal":"f"}, {"literal":"l"}, {"literal":"a"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "QuestGrantFlag$macrocall$2", "symbols": ["QuestGrantFlag$macrocall$2$string$1"]},
    {"name": "QuestGrantFlag$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "QuestGrantFlag$macrocall$1", "symbols": ["Whitespaces", "QuestGrantFlag$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "QuestGrantFlag$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "QuestGrantFlag", "symbols": ["QuestGrantFlag$macrocall$1"], "postprocess": entry('grant_flags')},
    {"name": "QuestUseFlag$macrocall$2$string$1", "symbols": [{"literal":"u"}, {"literal":"s"}, {"literal":"e"}, {"literal":"_"}, {"literal":"f"}, {"literal":"l"}, {"literal":"a"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "QuestUseFlag$macrocall$2", "symbols": ["QuestUseFlag$macrocall$2$string$1"]},
    {"name": "QuestUseFlag$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "QuestUseFlag$macrocall$1", "symbols": ["Whitespaces", "QuestUseFlag$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "QuestUseFlag$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "QuestUseFlag", "symbols": ["QuestUseFlag$macrocall$1"], "postprocess": entry('use_flags')},
    {"name": "QuestExtraFlag$macrocall$2$string$1", "symbols": [{"literal":"e"}, {"literal":"x"}, {"literal":"t"}, {"literal":"r"}, {"literal":"a"}, {"literal":"_"}, {"literal":"f"}, {"literal":"l"}, {"literal":"a"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "QuestExtraFlag$macrocall$2", "symbols": ["QuestExtraFlag$macrocall$2$string$1"]},
    {"name": "QuestExtraFlag$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "QuestExtraFlag$macrocall$1", "symbols": ["Whitespaces", "QuestExtraFlag$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "QuestExtraFlag$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "QuestExtraFlag", "symbols": ["QuestExtraFlag$macrocall$1"], "postprocess": entry('extra_flag')},
    {"name": "QuestExtraFlag2$macrocall$2$string$1", "symbols": [{"literal":"e"}, {"literal":"x"}, {"literal":"t"}, {"literal":"r"}, {"literal":"a"}, {"literal":"_"}, {"literal":"f"}, {"literal":"l"}, {"literal":"a"}, {"literal":"g"}, {"literal":"2"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "QuestExtraFlag2$macrocall$2", "symbols": ["QuestExtraFlag2$macrocall$2$string$1"]},
    {"name": "QuestExtraFlag2$macrocall$3", "symbols": ["StringLiteral"]},
    {"name": "QuestExtraFlag2$macrocall$1", "symbols": ["Whitespaces", "QuestExtraFlag2$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "QuestExtraFlag2$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "QuestExtraFlag2", "symbols": ["QuestExtraFlag2$macrocall$1"], "postprocess": entry('extra_flag2')},
    {"name": "QuestIsMap$macrocall$2$string$1", "symbols": [{"literal":"i"}, {"literal":"s"}, {"literal":"_"}, {"literal":"m"}, {"literal":"a"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "QuestIsMap$macrocall$2", "symbols": ["QuestIsMap$macrocall$2$string$1"]},
    {"name": "QuestIsMap$macrocall$3", "symbols": ["Boolean"]},
    {"name": "QuestIsMap$macrocall$1", "symbols": ["Whitespaces", "QuestIsMap$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "QuestIsMap$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "QuestIsMap", "symbols": ["QuestIsMap$macrocall$1"], "postprocess": entry('is_map')},
    {"name": "QuestCanSell$macrocall$2$string$1", "symbols": [{"literal":"c"}, {"literal":"a"}, {"literal":"n"}, {"literal":"_"}, {"literal":"s"}, {"literal":"e"}, {"literal":"l"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "QuestCanSell$macrocall$2", "symbols": ["QuestCanSell$macrocall$2$string$1"]},
    {"name": "QuestCanSell$macrocall$3", "symbols": ["Boolean"]},
    {"name": "QuestCanSell$macrocall$1", "symbols": ["Whitespaces", "QuestCanSell$macrocall$2", "Whitespaces", {"literal":"="}, "Whitespaces", "QuestCanSell$macrocall$3", "Blankline"], "postprocess": ([,,,,,[value]]) => value},
    {"name": "QuestCanSell", "symbols": ["QuestCanSell$macrocall$1"], "postprocess": entry('can_sell')},
    {"name": "NoProp", "symbols": ["Blankline"], "postprocess": () => ['__has_blanks__', true]},
    {"name": "Number$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "Number$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "Number$subexpression$1", "symbols": []},
    {"name": "Number$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "Number$ebnf$1", "symbols": ["Number$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Number", "symbols": ["Number$subexpression$1", "Number$ebnf$1"], "postprocess": ([[sign], digits]) => +`${sign || '+'}${digits.join('')}`},
    {"name": "StringLiteral$ebnf$1", "symbols": [/[^"]/]},
    {"name": "StringLiteral$ebnf$1", "symbols": ["StringLiteral$ebnf$1", /[^"]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "StringLiteral", "symbols": [{"literal":"\""}, "StringLiteral$ebnf$1", {"literal":"\""}], "postprocess": ([, text]) => text.join('')},
    {"name": "Boolean$subexpression$1$string$1", "symbols": [{"literal":"t"}, {"literal":"r"}, {"literal":"u"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Boolean$subexpression$1", "symbols": ["Boolean$subexpression$1$string$1"]},
    {"name": "Boolean$subexpression$1$string$2", "symbols": [{"literal":"f"}, {"literal":"a"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Boolean$subexpression$1", "symbols": ["Boolean$subexpression$1$string$2"]},
    {"name": "Boolean", "symbols": ["Boolean$subexpression$1"], "postprocess": ([[flag]]) => flag === "true"},
    {"name": "Newline$ebnf$1", "symbols": [{"literal":"\r"}], "postprocess": id},
    {"name": "Newline$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Newline", "symbols": ["Newline$ebnf$1", {"literal":"\n"}], "postprocess": id},
    {"name": "Blankline$ebnf$1", "symbols": ["Whitespaces"], "postprocess": id},
    {"name": "Blankline$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "Blankline", "symbols": ["Blankline$ebnf$1", "Newline"]},
    {"name": "Whitespace", "symbols": [{"literal":" "}]},
    {"name": "Whitespace", "symbols": [{"literal":"\t"}]},
    {"name": "Whitespaces$ebnf$1", "symbols": ["Whitespace"]},
    {"name": "Whitespaces$ebnf$1", "symbols": ["Whitespaces$ebnf$1", "Whitespace"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "Whitespaces", "symbols": ["Whitespaces$ebnf$1"], "postprocess": ebnfToString}
]
  , ParserStart: "main"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
